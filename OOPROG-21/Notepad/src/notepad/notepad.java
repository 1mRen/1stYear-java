package notepad;

/**
 *
 * @author mARC
 */
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.event.TextEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import javax.swing.JOptionPane;



public class notepad extends javax.swing.JFrame {
    
   
    String pName = "Notepad";
    String fileName = "";
    String hText, fn, dir, filename;
    boolean txtChanged = false;
    Clipboard clip = getToolkit().getSystemClipboard();
    
    public notepad() {
        initComponents();
    }
    
    public void checkFile(){
        BufferedReader read;
        StringBuffer sb = new StringBuffer();
        try {
            read = new BufferedReader(new FileReader(fileName));
            String line;
            while ((line = read.readLine()) != null) {
                sb.append(line + "\n");
            }
            txtArea.setText(sb.toString());
            read.close();
            } catch (FileNotFoundException e){
                System.out.print("File not found");
            } catch(IOException ioe){
                
            }
        }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogColor = new javax.swing.JDialog();
        colorChooser = new javax.swing.JColorChooser();
        txtArea = new java.awt.TextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveAsMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        colorMenu = new javax.swing.JMenuItem();

        javax.swing.GroupLayout dialogColorLayout = new javax.swing.GroupLayout(dialogColor.getContentPane());
        dialogColor.getContentPane().setLayout(dialogColorLayout);
        dialogColorLayout.setHorizontalGroup(
            dialogColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        dialogColorLayout.setVerticalGroup(
            dialogColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Notepad");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        txtArea.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                txtAreaTextValueChanged(evt);
            }
        });

        fileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        saveAsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveAsMenu.setText("Save as");
        saveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenu);
        fileMenu.add(jSeparator1);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");

        colorMenu.setText("Text Color");
        colorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorMenuActionPerformed(evt);
            }
        });
        jMenu2.add(colorMenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAreaTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_txtAreaTextValueChanged
        if(TextEvent.TEXT_VALUE_CHANGED != 0){
            if(!txtChanged){
                setTitle("* "+ getTitle());
                txtChanged = true;
                saveMenu.setEnabled(true);
            }
        }
    }//GEN-LAST:event_txtAreaTextValueChanged

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if(filename == ""){
            saveAs();
        } else {
            save(filename);
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void saveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsMenuActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        // TODO add your handling code here:
        newFile();
    }//GEN-LAST:event_newMenuActionPerformed

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        if(txtArea.getText().length() < 1){
            FileDialog fd = new FileDialog(this, "Choose File", FileDialog.LOAD);
            fd.setVisible(true);
            if(fd.getFile() != null){
                fileName = fd.getDirectory() + fd.getFile();
                setTitle(fileName);
                checkFile();
            }
            txtArea.requestFocus();
        }            
            else if(!txtChanged){
                FileDialog fd = new FileDialog(this, "Choose File ", FileDialog.LOAD);
                fd.setVisible(true);
                    if (fd.getFile()!=null){
                        fileName = fd.getDirectory() + fd.getFile();
                        setTitle(fileName);
                        checkFile();
                    }
                        txtArea.requestFocus();
                    } 
            else{
                int confirm = JOptionPane.showConfirmDialog(null, "Do you want to save before exiting the program?", "Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
                if (confirm == JOptionPane.YES_OPTION){
                    if("".equals(filename)){
                        saveAs();
                    }
                    else{
                        save(filename);
                    }
                FileDialog fd = new FileDialog(this, "Choose File", FileDialog.LOAD);
                fd.setVisible(true);
                if (fd.getFile()!=null){
                    fileName = fd.getDirectory() + fd.getFile();
                    setTitle(fileName);
                    checkFile();
                }
                txtArea.requestFocus();
                }
                else if(confirm == JOptionPane.NO_OPTION){
                    FileDialog fd = new FileDialog(this, "Choose File", FileDialog.LOAD);
                    fd.setVisible(true);
                    if(fd.getFile()!=null){
                        fileName = fd.getDirectory() + fd.getFile();
                        setTitle(fileName);
                        checkFile();
                    }
                    txtArea.requestFocus();
                }
            }
    }//GEN-LAST:event_openMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        if("".equals(txtArea.getText())){
            System.exit(0);
        }
        else if(!txtChanged){
            System.exit(0);
        }
        else{
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save before exiting this program?");
            if (confirm == JOptionPane.YES_OPTION){
                if(filename.equals("")){
                    saveAs();
                } else{
                    save(filename);
                }
            } if (confirm == JOptionPane.NO_OPTION){
                System.exit(0);
            }
        }
    }//GEN-LAST:event_exitMenuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if("".equals(txtArea.getText())){
            System.exit(0);
        } else if(!txtChanged){
            System.exit(0);
        } 
        else{
            int confirm = JOptionPane.showConfirmDialog(this, "Do you want to save before exiting this program?");
            if(confirm==JOptionPane.YES_OPTION){
                if(filename.equals("")){
                    saveAs();
                } else {
                    save(filename);
                }
            } 
            if (confirm == JOptionPane.NO_OPTION){
                    System.exit(0);
                }
        }
    }//GEN-LAST:event_formWindowClosing

    private void colorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorMenuActionPerformed
        Color c = colorChooser.showDialog(null, "Color Dialog", txtArea.getForeground());
        txtArea.setForeground(c);
    }//GEN-LAST:event_colorMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new notepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JMenuItem colorMenu;
    private javax.swing.JDialog dialogColor;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem saveAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private java.awt.TextArea txtArea;
    // End of variables declaration//GEN-END:variables

    private void saveAs() {
        FileDialog fd = new FileDialog(notepad.this, "Save", FileDialog.SAVE);
        fd.setVisible(true);
        if (fd.getFile() != null){
            
            fn = fd.getFile();
            dir = fd.getDirectory();
            filename = dir + fn + ".txt";
            
            setTitle(filename);
            try{
                DataOutputStream d = new DataOutputStream(new FileOutputStream(filename));
                hText = txtArea.getText();
                BufferedReader br = new BufferedReader(new StringReader(hText));
                while ((hText = br.readLine()) != null){
                    d.writeBytes(hText + "\r\n");
                    d.close();
                }     
            } catch (Exception e){
                System.out.print("File not Found");
            }
            txtArea.requestFocus();
            save(filename);
        }
    }

    private void save(String filename) {
        setTitle(pName + ""+ filename);
        try {
            FileWriter out;
            out = new FileWriter(fn);
            out.write(txtArea.getText());
            out.close();
        }
        catch(Exception err){
            System.out.println("Error: " + err);
        }
        txtChanged = false;
        saveMenu.setEnabled(false);
    }

    private void newFile() {
        if(txtArea.getText().length()<1){
            setTitle("Untitled-" + pName);
            txtArea.setText("");
            txtChanged=false;
        } 
        else if(!txtChanged){
            setTitle("Untitled-" + pName);
            txtArea.setText("");
            txtChanged=false;
        }
        
        else{
            int confirm = JOptionPane.showConfirmDialog(null, "Do you want to save before exiting this program?", "Notepad", JOptionPane.YES_NO_CANCEL_OPTION);
            if (confirm==JOptionPane.YES_OPTION){
                if("".equals(filename)){
                    saveAs();
                } else{
                    save(filename);
                }
                setTitle(pName);
                filename="";
                txtArea.setText("");
                txtChanged = false;
            }
            else if (confirm == JOptionPane.NO_OPTION){
                setTitle(pName);
                txtArea.setText("");
                txtChanged = false;      
            }
        }
    }
}
