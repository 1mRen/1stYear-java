
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author mARC
 */
public class salary extends javax.swing.JFrame {
    int currentSalary;
    
    /**
     * Creates new form salary
     */
    public salary() {
        initComponents();
        
        setTitle("Salary Table");
        setResizable(false);
        
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            {
                setHorizontalAlignment(JLabel.CENTER);
            }
        });

        // Center-align the column headers
        jTable1.getTableHeader().setDefaultRenderer(new DefaultTableCellRenderer() {
            {
                setHorizontalAlignment(JLabel.CENTER);
            }
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        TextFieldFname = new javax.swing.JTextField();
        TextFieldLname = new javax.swing.JTextField();
        TextFieldWorkH = new javax.swing.JTextField();
        PartTime = new javax.swing.JRadioButton();
        bttnAdd = new javax.swing.JButton();
        TextFieldHrate = new javax.swing.JTextField();
        FullTime = new javax.swing.JRadioButton();
        bttnUpdate = new javax.swing.JButton();
        bttnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Classification", "Hours", "Rate", "Salary"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowGrid(false);
        jTable1.setShowVerticalLines(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(25);
        }

        buttonGroup1.add(PartTime);
        PartTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        PartTime.setText("Part Time");
        PartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartTimeActionPerformed(evt);
            }
        });

        bttnAdd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bttnAdd.setText("Add");
        bttnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnAddActionPerformed(evt);
            }
        });

        TextFieldHrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldHrateActionPerformed(evt);
            }
        });

        buttonGroup1.add(FullTime);
        FullTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        FullTime.setText("FullTime");
        FullTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullTimeActionPerformed(evt);
            }
        });

        bttnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bttnUpdate.setText("Update");
        bttnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnUpdateActionPerformed(evt);
            }
        });

        bttnRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bttnRemove.setText("Remove");
        bttnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("First Name");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Last Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Work Hour");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Rate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(TextFieldLname)
                                .addComponent(TextFieldFname, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addGap(45, 45, 45)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(PartTime)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(bttnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(TextFieldWorkH, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(FullTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addGap(0, 0, Short.MAX_VALUE)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(32, 32, 32)
                                                    .addComponent(bttnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(31, 31, 31)
                                                    .addComponent(TextFieldHrate)
                                                    .addGap(6, 6, 6)))))))
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(bttnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextFieldFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(TextFieldLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextFieldWorkH)
                            .addComponent(TextFieldHrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FullTime)
                            .addComponent(PartTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bttnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(bttnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bttnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void bttnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnAddActionPerformed
        
    String fname = TextFieldFname.getText();
    String lname = TextFieldLname.getText();
    double hrate = Double.parseDouble(TextFieldHrate.getText());
    int hrs = Integer.parseInt(TextFieldWorkH.getText());
    
    String currentClassification = classification();

     teacher currentTeacher;

    if ("FullTime".equals(currentClassification)) {
        currentTeacher = new fullTime(fname, lname, hrate, hrs);
    } else if ("PartTime".equals(currentClassification)) {
        currentTeacher = new partTime(fname, lname, hrate, hrs);
    } else {
        // Handle the case when the classification is not recognized
        System.out.println("Invalid classification");
        return;
    }

    currentSalary = (int) (double) currentTeacher.compute(hrs, hrate);
    System.out.println("Current Salary: " + currentSalary);

    int result = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to add this?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION
    );

    if (result == JOptionPane.YES_OPTION) {
        // User clicked "Yes," proceed with adding the data
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{fname, lname, currentClassification, hrs, hrate, currentSalary});
    } else {
        // User clicked "No" or closed the dialog, do nothing
    }
    }//GEN-LAST:event_bttnAddActionPerformed

    private void PartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartTimeActionPerformed
       /*classification = "PartTime";
        String fname = TextFieldFname.getText();
        String lname = TextFieldLname.getText();
        double hrate = Double.parseDouble(TextFieldHrate.getText());
        int hrs = Integer.parseInt(TextFieldWorkH.getText());
        
        partTime partTimeTeacher = new partTime(fname, lname, hrate, hrs);*/
    }//GEN-LAST:event_PartTimeActionPerformed

    private void FullTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullTimeActionPerformed
      /* classification = "FullTime";
        String fname = TextFieldFname.getText();
        String lname = TextFieldLname.getText();
        double hrate = Double.parseDouble(TextFieldHrate.getText());
        int hrs = Integer.parseInt(TextFieldWorkH.getText());
        
        fullTime fullTimeTeacher = new fullTime(fname, lname, hrate, hrs);*/
    }//GEN-LAST:event_FullTimeActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int selectedRI = jTable1.getSelectedRow();

    TextFieldFname.setText(model.getValueAt(selectedRI, 0).toString());
    TextFieldLname.setText(model.getValueAt(selectedRI, 1).toString());
    TextFieldWorkH.setText(model.getValueAt(selectedRI, 3).toString());
    TextFieldHrate.setText(model.getValueAt(selectedRI, 4).toString());

    // Make the comparison case-insensitive
    String classif = model.getValueAt(selectedRI, 3).toString();

    // Check for null or unexpected values
    if ("FullTime".equals(classif)) {
        FullTime.setSelected(true);
        PartTime.setSelected(false); // Make sure the other radio button is deselected
    } else if ("PartTime".equals(classif)) {
        FullTime.setSelected(false); // Make sure the other radio button is deselected
        PartTime.setSelected(true);
    } else {
        // Handle the case when the classification is not recognized
        System.out.println("Invalid classification: " + classif);
        // You might want to handle this case more gracefully, e.g., show a message to the user
    }
    
    

    }//GEN-LAST:event_jTable1MouseClicked

    private void bttnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnUpdateActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if (selectedRow >= 0) {
         // Display a JOptionPane confirmation dialog
            int result = JOptionPane.showConfirmDialog(
             this,
             "Are you sure you want to update this?",
             "Confirmation",
             JOptionPane.YES_NO_OPTION
         );

        if (result == JOptionPane.YES_OPTION) {
             String fname = TextFieldFname.getText();
             String lname = TextFieldLname.getText();
             int hrs = Integer.parseInt(TextFieldWorkH.getText());
             double hrate = Double.parseDouble(TextFieldHrate.getText());

             // Update the underlying data in the model
             model.setValueAt(fname, selectedRow, 0);
             model.setValueAt(lname, selectedRow, 1);
             model.setValueAt(hrs, selectedRow, 3);
             model.setValueAt(hrate, selectedRow, 4);

             // Recalculate and update the classification and salary
             String currentClassification = classification();
             model.setValueAt(currentClassification, selectedRow, 2);

        teacher updatedTeacher;

        if ("FullTime".equals(currentClassification)) {
            updatedTeacher = new fullTime(fname, lname, hrate, hrs);
            FullTime.setSelected(true);
            PartTime.setSelected(false);
        } else if ("PartTime".equals(currentClassification)) {
            updatedTeacher = new partTime(fname, lname, hrate, hrs);
            FullTime.setSelected(false);
            PartTime.setSelected(true);
            } else {
                // Handle the case when the classification is not recognized
                System.out.println("Invalid classification");
                return;
            }

            int updatedSalary = (int) (double) updatedTeacher.compute(hrs, hrate);
            model.setValueAt(updatedSalary, selectedRow, 5);
        } else {
             // User clicked "No" or closed the dialog, do nothing
        }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update.");
        }
    }//GEN-LAST:event_bttnUpdateActionPerformed

    private void bttnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnRemoveActionPerformed
    // Get the selected row index
    int selectedRowIndex = jTable1.getSelectedRow();

    // Check if a row is selected
    if (selectedRowIndex == -1) {
        JOptionPane.showMessageDialog(
            this,
            "Please select a row to remove.",
            "Error",
            JOptionPane.ERROR_MESSAGE
        );
        return;
    }

    // Display a JOptionPane confirmation dialog
    int result = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to remove this?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION
    );

    if (result == JOptionPane.YES_OPTION) {
        // User clicked "Yes," proceed with removing the selected row
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.removeRow(selectedRowIndex);
    } else {
        // User clicked "No" or closed the dialog, do nothing
    }
    }//GEN-LAST:event_bttnRemoveActionPerformed

    private void TextFieldHrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldHrateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextFieldHrateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new salary().setVisible(true);
            }
        });
    }
    
    private String classification() {
    if (FullTime.isSelected()) {
        return "FullTime";
    } else if (PartTime.isSelected()) {
        return "PartTime";
    } else {
        return "Unknown";
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JRadioButton FullTime;
    public javax.swing.JRadioButton PartTime;
    private javax.swing.JTextField TextFieldFname;
    private javax.swing.JTextField TextFieldHrate;
    private javax.swing.JTextField TextFieldLname;
    private javax.swing.JTextField TextFieldWorkH;
    private javax.swing.JButton bttnAdd;
    private javax.swing.JButton bttnRemove;
    private javax.swing.JButton bttnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
